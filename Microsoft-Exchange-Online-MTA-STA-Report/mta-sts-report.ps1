<#############################################################################################

 Create MTA-STS Result Report
 Author: Curtis Cannon (Traversecloud.co.uk)
 https://traversecloud.co.uk/generate-mta-sts-results-report-with-powershell/
 Date: 13/11/2023

 Description:
 This script is used to generate a easy to read report from a series of json.gz files
 generated by the MTA-STS reporting. MTA-STS would first need to be setup in
 reporting mode and then left to report for a a set amount of time to get accurate results

 While this script is normally fairly fast, the more files you put into it, the longer
 it will take to complete

 There is no need to extract the contents of the json.gz files generated by MTA-STS reports
 as the script will do this for you

 Additional Info:
 - Requires you to have write access to your Root Drive (C:\)
 - This will create "C:\Temp" & "C:\Temp\MTASTS Reports" folders if they don't exist already
 - The script will prompt part way through for you to save your files to the 
   "C:\Temp\MTASTS Reports" location.
 - Script also creates "C:\Temp\MTASTS Reports\reportfiles" location for uncompressed files
 - Report is saved to "C:\Temp\MTASTS Reports" call "MTA-STS Report.csv"

#############################################################################################>

If ((test-path "C:\temp") -eq $false){
    New-Item -Path "C:\" -Name "Temp" -ItemType "Directory"
    cls
}

If ((test-path "C:\temp\MTASTS Reports") -eq $false){
    New-Item -Path "C:\Temp\" -Name "MTASTS Reports" -ItemType "Directory"
    cls
}


Write-host -f Yellow "Please save all report files to C:\temp\MTASTS Reports"
Write-host -f Yellow ""
Write-host -f Yellow "These can be left as the default file type of json.gz as the script will expand them"
Write-host -f Yellow ""
Write-host -f Yellow "Once all reports have been saved please press enter to continue"
pause

If ((test-path "C:\temp\MTASTS Reports\reportfiles") -eq $false){
    New-Item -Path "C:\temp\MTASTS Reports\" -Name "reportfiles" -ItemType "Directory"
    cls
}

Function DeGZip-File{
    Param(
        $infile,
        $outfile = ($infile -replace '\.gz$','')
        )
    $input = New-Object System.IO.FileStream $inFile, ([IO.FileMode]::Open), ([IO.FileAccess]::Read), ([IO.FileShare]::Read)
    $output = New-Object System.IO.FileStream $outFile, ([IO.FileMode]::Create), ([IO.FileAccess]::Write), ([IO.FileShare]::None)
    $gzipStream = New-Object System.IO.Compression.GzipStream $input, ([IO.Compression.CompressionMode]::Decompress)
    $buffer = New-Object byte[](1024)
    while($true){
        $read = $gzipstream.Read($buffer, 0, 1024)
        if ($read -le 0){break}
        $output.Write($buffer, 0, $read)
        }
    $gzipStream.Close()
    $output.Close()
    $input.Close()
}

$outputreport = @()

$rawreportfiles = (get-childitem "C:\temp\MTASTS Reports").VersionInfo.filename
$increment = 1
foreach ($rawreportfile in $rawreportfiles){
    $outputfilename = "C:\temp\MTASTS Reports\reportfiles\Report" + [string]$increment + ".txt"
    DeGZip-File $rawreportfile $outputfilename
    $increment++
}

$reportfiles = (get-childitem "C:\temp\MTASTS Reports\reportfiles").VersionInfo.filename
$reportfilecount = $reportfiles.count
$reportinteration = 0
do {
    $content = get-content $reportfiles[$reportinteration]
    $splitcontent = $content.split('"')

    $orgnameid = ([array]::IndexOf($splitcontent, 'organization-name')) + 2
    $orgname = $splitcontent[$orgnameid]

    $starttimestampid = ([array]::IndexOf($splitcontent, 'start-datetime')) + 2
    $starttimestamp = $splitcontent[$starttimestampid]

    $endtimestampid = ([array]::IndexOf($splitcontent, 'end-datetime')) + 2
    $endtimestamp = $splitcontent[$endtimestampid]
    
    $reportaddressid = ([array]::IndexOf($splitcontent, 'contact-info')) + 2
    $reportaddress = $splitcontent[$reportaddressid]
    
    $successcountid = ([array]::IndexOf($splitcontent, 'total-successful-session-count')) + 1
    $successcount = $splitcontent[$successcountid]
    $successcount = $successcount.replace(":","")
    $successcount = $successcount.replace(",","")
    
    $failurecountid = ([array]::IndexOf($splitcontent, 'total-failure-session-count')) + 1
    $failurecount = $splitcontent[$failurecountid]
    $failurecount = $failurecount.replace(":","")
    $failurecount = $failurecount.replace(",","")
    $failurecount = $failurecount.replace("}","")
    $failurecount = $failurecount.replace("{","")
    $failurecount = $failurecount.replace("]","")

    $outputreport += New-Object psobject -Property @{
        "Start timestamp" = $starttimestamp
        "End timestamp" = $endtimestamp
        "Organisation Name" = $orgname
        "Reporting Address" = $reportaddress
        "Success Count" =  $successcount
        "Failure Count" = $failurecount
    }
    $reportinteration++
} Until ($reportinteration -eq $reportfilecount)

$outputreport | select "Start timestamp", "End timestamp", "Organisation Name", "Reporting Address", "Success Count", "Failure Count" | Sort "Start timestamp" -Descending | Export-Csv -NoTypeInformation -Path "C:\temp\MTASTS Reports\MTA-STS Report.csv"
cls
Write-Host -F Yellow "Your report has been saved in C:\temp\MTASTS Reports\MTA-STS Report.csv"
pause